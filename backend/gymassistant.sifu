GymAssistant project[
  namespace ninja
  url ninja.com
  version 1
](

  ### SERVER
  backend server[
    template java-springboot(tests fabut)
    developer (olahnikola)
    security (principal User, role Role, type username,
      signIn [query User.findByIdWithPerson, response dto( User.id, User.username, User.role)])
  ](

    #ENUM
    Role enum(USER, ADMIN)

    #USER
    User model(

      findByIdWithPerson select from User
        where User.id == id
    )

    WorkoutPlan model(
        user User
        name text
        active boolean
        workouts list Workout[oneToMany workoutPlan]
    )

    Workout model(
        workoutPlan WorkoutPlan
        date date
        name text
        exercises list Exercise[oneToMany workout]


        workouts select from Workout
          join WorkoutPlan on Workout.workoutPlan
          join Exercise on Workout.exercises
          where WorkoutPlan.active == true and WorkoutPlan.user.id == userId
    )

    Exercise model(
        workout Workout
        name text
        goalReps integer
        goalWeight decimal

        set1Reps integer
        set1Weight decimal
        set2Reps integer
        set2Weight decimal
        set3Reps integer
        set3Weight decimal
    )

    WorkoutApi api[rest, secured USER](
        startWorkoutPlan create[
            request dto(
                maxSquat decimal
                maxBench decimal
                maxDeadlift decimal
            )
        ]

        workoutPlans read[
          select from WorkoutPlan where WorkoutPlan.user.id == userId
        ]

        quickInfo read[
          response dto(
              activeWorkoutPlanId optional WorkoutPlan.id
              activeWorkoutPlanName optional WorkoutPlan.name
              todaysWorkoutId optional Workout.id
              todaysWorkoutName optional Workout.name
          )
        ]

        workouts read[
            request dto(
                WorkoutPlan.id
            )

            response dto(
                WorkoutPlan.id
                WorkoutPlan.name
                WorkoutPlan.active
                WorkoutPlan.workouts dto(
                    Workout.date
                    Workout.name
                    Workout.exercises dto(
                        Exercise.name
                        Exercise.goalReps
                        Exercise.goalWeight
                        Exercise.set1Reps
                        Exercise.set1Weight
                        Exercise.set2Reps
                        Exercise.set2Weight
                        Exercise.set3Reps
                        Exercise.set3Weight
                    )
                )
            )
        ]

        updateWorkout update[
           model Workout
           request dto(
                Workout.id
                Workout.exercises dto(
                  Exercise.set1Reps
                  Exercise.set1Weight
                  Exercise.set2Reps
                  Exercise.set2Weight
                  Exercise.set3Reps
                  Exercise.set3Weight
                )
           )
        ]
    )
  )
)
